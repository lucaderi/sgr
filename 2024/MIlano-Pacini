import argparse
import re
import os
from datetime import datetime, timedelta
import pytz
import geoip2.database

# regex per estrarre l'IP e il timestamp
log_pattern = r"(?P<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) - - \[(?P<timestamp>\d{2}/[A-Za-z]{3}/\d{4}:\d{2}:\d{2}:\d{2} [+\-]\d{4})\] \"(?P<request>[^\"]+)\" (?P<status>\d+)"

italian_tz = pytz.timezone("Europe/Rome")

# setup reader per il database di geolocalizzazione IP
reader = geoip2.database.Reader("dbip-country-lite-2024-11.mmdb")


# Funzione per verificare se un IP è situato in Italia
def is_ip_from_italy(ip):
    try:
        response = reader.country(ip)
        return response.country.iso_code == "IT"
    except geoip2.errors.AddressNotFoundError:
        print(f"L'IP {ip} non è stato trovato nel database.")
        return False
    except Exception as e:
        print(f"Errore durante la geolocalizzazione dell'IP {ip}: {e}")
        return False


# Funzione principale per analizzare un file di log
def analyze_log(file_name):
    gruppi = {}
    inizio_primo_gruppo = None
    gruppo_corrente = 1

    with open(file_name, "r") as file:
        for line in file:
            match = re.match(log_pattern, line)
            if match:
                ip = match.group("ip")
                timestamp_str = match.group("timestamp")
                request = match.group("request")
                status = match.group("status")

                # Conversione del timestamp in un oggetto datetime
                timestamp_dt = datetime.strptime(timestamp_str, "%d/%b/%Y:%H:%M:%S %z")
                timestamp_dt_italian = timestamp_dt.astimezone(italian_tz)

                # Imposta l'orario del primo gruppo
                if inizio_primo_gruppo is None:
                    inizio_primo_gruppo = timestamp_dt_italian
                    gruppi[gruppo_corrente] = []

                # Calcola il numero del gruppo corrente
                delta = timestamp_dt_italian - inizio_primo_gruppo
                gruppo_corrente = (delta // timedelta(minutes=5)) + 1

                # Aggiunge la riga al gruppo appropriato
                if gruppo_corrente not in gruppi:
                    gruppi[gruppo_corrente] = []
                gruppi[gruppo_corrente].append({
                    "ip": ip,
                    "timestamp": timestamp_dt_italian,
                    "request": request,
                    "status": int(status)
                })

    # Analisi dei gruppi
    for gruppo, righe in gruppi.items():
        sospetti = set()
        fallimenti = {}
        for log in righe:
            ip = log["ip"]
            request = log["request"]
            status = log["status"]

            # Controllo SQL Injection
            if re.search(r"(?:' OR |UNION|SELECT|--)", request, re.IGNORECASE):
                sospetti.add(ip)

            # Controllo URL sospetto
            if re.search(r"GET /\.", request):
                sospetti.add(ip)

            # Tentativi di login falliti consecutivi
            if status >= 400:
                if ip not in fallimenti:
                    fallimenti[ip] = 0
                fallimenti[ip] += 1
            else:
                fallimenti[ip] = 0

            # Controllo tentativi di login da IP fuori dall'Italia
            if "login" in request and not is_ip_from_italy(ip):
                sospetti.add(ip)

        # Aggiunge IP con più fallimenti consecutivi
        for ip, count in fallimenti.items():
            if count >= 3:
                sospetti.add(ip)

        # Stampa gli IP sospetti per il gruppo corrente
        if sospetti:
            print(f"Gruppo {gruppo} (file: {file_name}): IP sospetti rilevati - {', '.join(sospetti)}")


# Funzione per ordinare e analizzare i file di log
def analyze_log_files_in_directory(directory):
    # recupera tutti i file nella cartella e ordina per data di modifica
    log_files = sorted(
        [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))],
        key=os.path.getmtime
    )

    # analisi file di log
    for log_file in log_files:
        print(f"Analizzando il file: {log_file}")
        analyze_log(log_file)


# Funzione principale che gestisce gli argomenti da linea di comando
def main():
    # Creazione del parser per i parametri da linea di comando
    parser = argparse.ArgumentParser(description="Analizza i file di log per attività sospette.")
    parser.add_argument(
        "log_directory",
        help="Cartella contenente i file di log da analizzare"
    )

    # Estrazione degli argomenti
    args = parser.parse_args()

    # Esegui l'analisi sulla cartella specificata
    analyze_log_files_in_directory(args.log_directory)

    # Chiusura del reader GeoIP
    reader.close()


if __name__ == "__main__":
    main()
