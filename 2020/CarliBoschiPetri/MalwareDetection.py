#!/usr/bin/python3

import pyshark
import hyperloglog
import sys

#-------------------------------------------------------------------------------

def parsing_parameters():

    l = len(sys.argv)
    f_name_ = ''
    num_IP = 0
    time_ = 0
    num_portsSRC = 0
    num_portsDST = 0

    #Script with no parameters
    if(l == 1):
        print('''Usage:

                python3 MalwareDetection.py -p <filename> -sIP <num_IP> -sPS <num_portsSRC> -sPD <num_portsDST> -t <time>

                -p
                    name of file.pcap to analyze

                -sIP
                    different IPdst threshold [default : 30]

                -sPS
                    different source ports threshold [default : 50]

                -sPD
                    different destination ports threshold [default : 50]

                -t
                    interval time of each measurement in seconds [default : 30s]
            ''')
        exit()


    for i in range(1,l):
        if(sys.argv[i] == '-p' and i<l):
            f_name_ = sys.argv[i+1] #name of file pcap
        elif(sys.argv[i] == '-sIP' and i<l):
            num_IP = sys.argv[i+1] #threshold for number of different IPdst
        elif(sys.argv[i] == '-sPS' and i<l):
            num_portsSRC = sys.argv[i+1] #threshold for number of different source ports
        elif(sys.argv[i] == '-sPD' and i<l):
            num_portsDST = sys.argv[i+1] #threshold for number of different destination ports
        elif(sys.argv[i] == '-t' and i<l):
            time_ = sys.argv[i+1] #interval time in seconds
        elif((sys.argv[i] == '--help' or sys.argv[i] == '-h') and i<=l):
            print('''Usage:

                    python3 MalwareDetection.py -p <filename> -sIP <num_IP> -sPS <num_portsSRC> -sPD <num_portsDST> -t <time>

                    -p
                        name of file.pcap to analyze

                    -sIP
                        different IPdst threshold [default : 30]

                    -sPS
                        different source ports threshold [default : 50]

                    -sPD
                        different destination ports threshold [default : 50]

                    -t
                        interval time of each measurement in seconds [default : 30s]
                ''')
            exit()

    #Default value for threshold
    if(num_IP == 0):
        num_IP = 30

    #Default value for threshold
    if(num_portsSRC == 0):
        num_portsSRC = 50

    #Default value for threshold
    if(num_portsDST == 0):
        num_portsDST = 50

    #Default value for interval time (in seconds)
    if(time_ == 0):
        time_ = 30

    return f_name_, int(num_IP), int(num_portsSRC), int(num_portsDST), int(time_)

#-------------------------------------------------------------------------------

def get_info(pkt):

    #Packet info on layer IP
    if(hasattr(pkt, 'ip')):
        IP_dst = pkt.ip.dst
        IP_src = pkt.ip.src
        pkt_time = pkt.frame_info.time_relative
    else:

        #If packet has another protocol, assign default value to IPs
        IP_dst = 0
        IP_src = 0
        pkt_time = 0

    #Packet info on layer TCP/UDP
    if(hasattr(pkt,'tcp')):
        PORT_src = pkt.tcp.srcport
        PORT_dst = pkt.tcp.dstport
    elif(hasattr(pkt,'udp')):
        PORT_src = pkt.udp.srcport
        PORT_dst = pkt.udp.dstport
    else:

        #If packet has another protocol, assign default value to ports
        PORT_dst = 0
        PORT_src = 0

    return IP_dst, IP_src, PORT_dst, PORT_src, float(pkt_time)

#-------------------------------------------------------------------------------

def formatString(s):

    s = s.replace('\'', '')
    s = s.replace('(', '')
    s = s.replace(')', '')
    s = s.strip()

    return s

#-------------------------------------------------------------------------------

def print_report(diz,n,threshold,flag):

    for key in diz:
        if(len(diz[key]) > threshold):
            if(n == 1): #PRIMO ATTACCO RILEVATO
                print(f'''
                    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                    | Tipologia attacco: 1 IP -> N IP
                    |      Problema:     probabile infezione dell'ip sorgente
                    |    Descrizione:    {key} sta contattando {len(diz[key])} diversi host
                    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ''')
                flag = True
            elif(n == 2): #SECONDO ATTACCO
                s_key = str(key)
                sorgIP, sorgPORT, destIP = s_key.split(',')

                sorgIP = formatString(sorgIP)
                sorgPORT = formatString(sorgPORT)
                destIP =formatString(destIP)

                print(f'''
                    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                    | Tipologia attacco: 1 IP, 1 PORTA -> 1 IP, N PORTE
                    |       Problema:    probabile port scanning su {destIP}
                    |     Descrizione:   {sorgIP}::{sorgPORT} sta contattando l'host {destIP} su {len(diz[key])} porte diverse
                    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ''')
                flag = True
            else: #TERZO ATTACCO
                s_key = str(key)
                sorgIP, destIP, destPORT = s_key.split(',')

                #formattazione stringhe
                sorgIP = formatString(sorgIP)
                destIP = formatString(destIP)
                destPORT = formatString(destPORT)

                print(f'''
                    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                    | Tipologia attacco: 1 IP, N PORTE -> 1 IP, 1 PORTA
                    |       Problema:    probabile tentativo di accesso a un servizio su porta {destPORT}
                    |     Descrizione:   {sorgIP} sta contattando {destIP} sulla porta {destPORT} ripetutamente, tramite {len(diz[key])} diverse porte sorgenti
                    + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                ''')
                flag = True
    return flag
#-------------------------------------------------------------------------------

def analyze_pcap(diz1,diz2,diz3,list_,soglia1,soglia2,soglia3, flag):

    for elem in list_:

        #Take the info about the current item of the list
        ip_s = elem[0]
        port_s = elem[1]
        ip_d = elem[2]
        port_d = elem[3]

        #Fill the first dictionary
        if(ip_s not in diz1):
            diz1[ip_s] = hyperloglog.HyperLogLog(0.05)
        else:
            diz1.get(ip_s).add(ip_d)

        #Fill the second dictionary
        if((ip_s,port_s,ip_d) not in diz2):
            diz2[(ip_s,port_s,ip_d)] = hyperloglog.HyperLogLog(0.05)
        else:
            diz2.get((ip_s,port_s,ip_d)).add(port_d)

        #Fill the third dictionary
        if((ip_s, ip_d, port_d) not in diz3):
            diz3[ip_s, ip_d, port_d] = hyperloglog.HyperLogLog(0.05)
        else:
            diz3[(ip_s,ip_d,port_d)].add(port_s)


    flag = print_report(diz1,1,soglia1,flag)
    flag = print_report(diz2,2,soglia2,flag)
    flag = print_report(diz3,3,soglia3,flag)

    #Reset dictionaries and list
    list_.clear()
    diz1.clear()
    diz2.clear()
    diz3.clear()

    return flag

#-------------------------------------------------------------------------------

#Take the parameters from command line
nomeFile, soglia_IP, soglia_PorteSRC, soglia_PorteDST, step = parsing_parameters()

#Open file pcap
filename = pyshark.FileCapture(nomeFile, keep_packets=False)

#dizionario per attacco 1 IPsrc --> N IPdst
#key-value :: IPsorgente - N IPdestinazione
diz_attack1 = {}

#dizionario per attacco 1 IPsrc, 1 PORTAsrc --> 1 IPdst, n PORTEdst
#key-value :: IPsorgente, IPdestinazione, port sorg - N porte dest
diz_attack2 = {}

#dizionario per attacco 1 IPsrc, n PORTAsrc --> 1 IPdst, 1 PORTAdst
#key-value :: IPsorgente, IPdestinazione, portadst - N porte sorgente
diz_attack3 = {}

#List that contains every different flow
flows_list = []

start_time = float(0)
current_time = 0
i = 0
flag = False

print(f'Analyzing {nomeFile} ...')

while True:

    #Analyze one packet
    try:
        packet = filename.next()

        IP_dst, IP_src, PORT_dst, PORT_src, current_time = get_info(packet)

        #Packet has no IP protocol
        if(IP_dst == 0):
            continue

        #Packet has no TCP/UDP protocol
        if(PORT_dst == 0):
            continue

        flow = [IP_src, PORT_src, IP_dst, PORT_dst]
        flow2 = [IP_dst,PORT_dst,IP_src,PORT_src]

        #Fill the flows list
        if((flow not in flows_list) and (flow2 not in flows_list)):
            flows_list.append(flow)

        #Check if interval time has expired
        if(abs(start_time-current_time) >= step):
            flag = analyze_pcap(diz_attack1, diz_attack2, diz_attack3, flows_list, soglia_IP, soglia_PorteDST, soglia_PorteSRC, flag)
            start_time = current_time

        #SOLO DEBUG
        #per analizzare solo i primi 3000 pacchetti

        #i=i+1
        #if(i%10000 == 0):
        #    print('.')
        #if(i==20000):
        #   break

    except StopIteration:
        break

if(flag == False):
    print(f'Non sono state rilevate anomalie nel file {nomeFile}')

filename.close()
